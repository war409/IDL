; ######################################################################
; NAME: OWL_TIME_SERIES_FLOODEVENT.pro
; LANGUAGE: ENVI IDL
; AUTHOR: Garth Warren
; DATE: 30/11/2009
; DLM: 03/12/2009
; DESCRIPTION: THIS TOOL SEEKS TO IDENTIFY FLOOD EVENT DATES. THAT IS; 
;              FOR EACH REGION (ROI) AND DATE (BAND) IF THE OWL VALUE (BY 
;              -CELL) IS EQUAL TO OR GREATER THAN A USER-SELECTED THRESHOLD  
;              AND IF THE PROPORTION OF SUCH VALUES (BY-REGION) IS EQUAL TO   
;              OR GREATER THAN A USER-SELECTED THRESHOLD THE REGION OF   
;              INTEREST IS CLASSIFIED AS FLOODED AT THAT DATE.
; INPUT: SINGLE OR MULTIBAND IMAGE DATA. ONE OR MORE ROI.
; OUTPUT: TWO TEXT (OR CSV) FILES. THE SUMMARY OUTPUT CONTAINS FOR EACH ROI
;         AND DATE THE PROPORTION OF CELLS IN EACH ROI BY DATE THAT SATISFY 
;         THE INUNDATION THRESHOLD, AND A BINARY (0 OR 1) RESULT INDICATING 
;         WHETHER THE REGION WAS FLOODED. THE FLOOD-DATE OUTPUT IS A 
;         CONCISE VERSION OF THE SUMMARY OUTPUT.
; SET PARAMETERS: VIA WIDGETS.
; NOTES: THE ROI MUST BE ASSOCIATED WITH THE INPUT IMAGE DATA.
; ######################################################################
;
PRO OWL_TIME_SERIES_FLOODEVENT
  ; GET START TIME FOR TOTAL
  T_TIME = SYSTIME(1)
  PRINT,''
  PRINT,'BEGIN PROCESSING: OWL_TIME_SERIES_FLOODEVENT'
  PRINT,''
  ;---------------------------------------------------------------------
  ; SET THE INPUT IMAGE DATA (SINGLE BAND IMAGE OR MULTIBAND IMAGE)
  ENVI_SELECT, TITLE='SELECT INPUT IMAGE DATA', FID=FID, POS=POS
  ; CHECK WHETHER THE INPUT IMAGE DATA NAME AND PATH IS VALID
  IF (FID EQ -1) THEN BEGIN
    PRINT,''
    PRINT, 'THE SELECTED INPUT FILE IS NOT VALID'
    PRINT,''
    RETURN
  ENDIF
  ENVI_FILE_QUERY, FID, BNAME=BNAME, SNAME=SNAME, NB=NB, NS=NS, NL=NL, DATA_TYPE=DATA_TYPE
  ; COUNT THE NUMBER OF BANDS IN THE INPUT FILE
  RESULT = WHERE(BNAME, COUNT)
  BCOUNT = COUNT
  PRINT, 'NUMBER OF BANDS: ', BCOUNT
  ; GET DIMENSIONS
  DIMS = [-1, 0, NS-1, 0, NL-1]
  ; GET MAP INFO
  MAP_INFO = ENVI_GET_MAP_INFO(FID=FID)
  ;---------------------------------------------------------------------
  ; GET ROI ASSOCIATED WITH THE INPUT IMAGE
  ROI_IDS = ENVI_GET_ROI_IDS(FID=FID, ROI_NAME=ROI_NAME, /SHORT_NAME)
  ; ERROR CHECK
  IF (ROI_IDS[0] EQ -1) THEN BEGIN
    PRINT,''
    PRINT, 'NO ROI ASSOCIATED WITH THE INPUT IMAGE'
    PRINT,''
    RETURN
  ENDIF
  ;---------------------------------------------------------------------
  ; SET ROI
  ; ROI SELECTION WIDGET
  BASE = WIDGET_AUTO_BASE(TITLE='SELECT ONE OR MORE ROI')
  WM   = WIDGET_MULTI(BASE, LIST=ROI_NAME, UVALUE='LIST', /AUTO)
  RESULT = AUTO_WID_MNG(BASE)
  ; ERROR CHECK
  IF (RESULT.ACCEPT EQ 0) THEN BEGIN
    PRINT,''
    PRINT, 'THE SELECTED ROI IS NOT VALID'
    PRINT,''
    RETURN
  ENDIF
  ; ASSIGN RESULTS TO POINTER
  PTR = WHERE(RESULT.LIST EQ 1, COUNT)
  RCOUNT = COUNT
  PRINT, 'NUMBER OF ROI: ', RCOUNT
  ;---------------------------------------------------------------------
  ; SET THE OWL INUNDATION THRESHOLD PARAMETER
  ; IF THE OWL VALUE OF A CELL IS EQUAL TO OR GREATER THAN THE THRESHOLD 
  ;   PARAMETER THE CELL IS SAID TO BE INUNDATED 
  PA_BASE1 = WIDGET_AUTO_BASE(TITLE='DEFINE... (0 - 100)')
  WO_PA1 = WIDGET_PARAM(PA_BASE1, DT=2, UVALUE='PARAM1', $
    PROMPT='ENTER THE INUNDATION THRESHOLD', XSIZE=31, /AUTO)
  RESULT_PA1 = AUTO_WID_MNG(PA_BASE1)
  IF (RESULT_PA1.ACCEPT EQ 0) THEN BEGIN
    PRINT,''
    PRINT, 'THE SELECTED PARAMETER IS NOT VALID'
    PRINT,''
    RETURN
  ENDIF ELSE BEGIN
    PARAM1 = DOUBLE(RESULT_PA1.PARAM1)
    PRINT, 'INUNDATION THRESHOLD VALUE = ', STRTRIM(PARAM1, 2)
  ENDELSE
  ;---------------------------------------------------------------------
  ; SET OPERATOR FOR PERCENTAGE OF INUNDATION THRESHOLD
  OP_BASE = WIDGET_AUTO_BASE(TITLE='DEFINE...')
  LIST=['EQ','LE','LT','GE','GT']
  WO_OP = WIDGET_PMENU(OP_BASE, LIST=LIST, uvalue='OUTOP', $
    PROMPT='SELECT AN OPERATOR', XSIZE=20, /AUTO)
  RESULT_OP = AUTO_WID_MNG(OP_BASE) 
  IF (RESULT_OP.ACCEPT EQ 0) THEN BEGIN
    PRINT,''
    PRINT, 'THE SELECTED OPERATOR IS NOT VALID'
    PRINT,''
    RETURN
  ENDIF ELSE BEGIN
    OPER = LIST(RESULT_OP.OUTOP)
    PRINT, 'OPERATOR: ', OPER
  ENDELSE
  ;---------------------------------------------------------------------
  ; SET THE PERCENTAGE OF INUNDATION THRESHOLD PARAMETER 
  ; IF THE PERCENTAGE OF INUNDATION (OWL GE 'PARAM1') IS EQUAL TO OR 
  ;   GREATER (AS PER OPERATOR SEE ABOVE SECTION) THAN THE PERCENTAGE 
  ;   THRESHOLD VALUE FLOOD STATUS IS 1 (FLOOD) ELSE FLOOD STATUS IS 0 
  ;   (NO FLOOD)
  PA_BASE2 = WIDGET_AUTO_BASE(TITLE='DEFINE... ' + OPER + ' (0.0 - 1.0)')
  WO_PA2 = WIDGET_PARAM(PA_BASE2, DT=2, UVALUE='PARAM2', $
    PROMPT='ENTER THE PERCENTAGE OF INUNDATION THRESHOLD', XSIZE=45, /AUTO)
  RESULT_PA2 = AUTO_WID_MNG(PA_BASE2)
  IF (RESULT_PA2.ACCEPT EQ 0) THEN BEGIN
    PRINT,''
    PRINT, 'THE SELECTED PARAMETER IS NOT VALID'
    PRINT,''
    RETURN
  ENDIF ELSE BEGIN
    PARAM2 = DOUBLE(RESULT_PA2.PARAM2)
    PRINT, 'FLOOD STATUS THRESHOLD VALUE = ', STRTRIM(PARAM2, 2)
  ENDELSE
  ;---------------------------------------------------------------------
  ; SET OUTPUT SUMMARY FILE
  OUTFILE1=DIALOG_PICKFILE(TITLE='ENTER OUTPUT SUMMARY FILE NAME AND EXTENSION')
  ; ERROR CHECK
  IF OUTFILE1 EQ '' THEN BEGIN
    PRINT,''
    PRINT, 'THE SELECTED OUTPUT IS NOT VALID'
    PRINT,''
    RETURN
  ENDIF
  ;---------------------------------------------------------------------
  ; WRITE THE EMPTY OUTPUT SUMMARY FILE
  OPENW, OUTLUN1, OUTFILE1, /GET_LUN
  ; BUILD HEADER NAMES
  PROP_GE_ALLPIXELS = 'PROP_GE_' + STRTRIM(FIX(RESULT_PA1.PARAM1), 2) + '_ALLPIXELS'
  PROP_GE_VALIDPIXELS = 'PROP_GE_' + STRTRIM(FIX(RESULT_PA1.PARAM1), 2) + '_VALIDPIXELS'
  ; WRITE FILE HEADER
  FNAME1=["ROIID","DATEID","BAND","DATE","YEAR","DOY","ROI", $
    "PROP_EQ_255", PROP_GE_ALLPIXELS, PROP_GE_VALIDPIXELS, "FLOOD_ALLPIXELS", "FLOOD_VALIDPIXELS"]
  ; WRITE
  PRINTF, FORMAT='(10000(A,:,","))', OUTLUN1, '"' + FNAME1 + '"'
  ;---------------------------------------------------------------------
  ; SET OUTPUT FLOOD-DATE FILE
  OUTFILE2=DIALOG_PICKFILE(TITLE='ENTER OUTPUT FLOOD-DATE FILE NAME AND EXTENSION')
  ; ERROR CHECK
  IF OUTFILE2 EQ '' THEN BEGIN
    PRINT,''
    PRINT, 'THE SELECTED OUTPUT IS NOT VALID'
    PRINT,''
    RETURN
  ENDIF
  ;--------------------------------------------------------------------
  ; WRITE THE EMPTY OUTPUT FLOOD-DATE FILE
  OPENW, OUTLUN2, OUTFILE2, /GET_LUN
  ; WRITE FILE HEADER
  FNAME2=["ROIID","ROI","BAND","DATE","YEAR","DOY", $
    "PROP_EQ_255", PROP_GE_ALLPIXELS, PROP_GE_VALIDPIXELS, "FLOOD_ALLPIXELS", "FLOOD_VALIDPIXELS"]
  ; WRITE
  PRINTF, FORMAT='(10000(A,:,","))', OUTLUN2, '"' + FNAME2 + '"'
  ;---------------------------------------------------------------------
  ; ROI LOOP
  FOR i=0, RCOUNT-1 DO BEGIN ; FOR 'i' START
    ; GET START TIME FOR TOTAL
    L_TIME = SYSTIME(1)
    ;-------------------------------------------------------------------
    ; GET DATA AT ROI[i]
    DATA1 = ENVI_GET_ROI_DATA(ROI_IDS[PTR[i]], FID=FID, POS=[0])
    ; CREATE VARIABLE 'TEMP_DATA'
    TEMP_DATA = DBLARR(N_ELEMENTS(POS),N_ELEMENTS(DATA1))
    ; GET ROI NAME
    RESULT2 = ENVI_GET_ROI(ROI_IDS[PTR[i]], ROI_NAME=ROI_NAME)
    ; GET SHORT ROI NAME
    ROINAME = STRMID(ROI_NAME, 12, (STRLEN(ROI_NAME)-12))
    ;-------------------------------------------------------------------
    ; BAND LOOP
    FOR j=0, N_ELEMENTS(POS)-1 DO BEGIN ; FOR 'j' START
      ;-----------------------------------------------------------------
      ; GET DATA AT ROI[i] FOR BAND[j]
      DATA = ENVI_GET_ROI_DATA(ROI_IDS[PTR[i]], FID=FID, POS=POS[j])
      ; FILL ARRAY WITH BAND DATA
      TEMP_DATA[j,*] = DATA
      ;-----------------------------------------------------------------
      ; GET BAND NAME
      BNAMEX = BNAME[j]
      ; GET SHORT BAND NAME
      IF (j+1) LT 10 THEN BANDNAME = STRMID(BNAMEX, 15, 32)
      IF (((j+1) GE 10) AND ((j+1) LT 100)) THEN BANDNAME = STRMID(BNAMEX, 16, 32)
      IF (j+1) GE 100 THEN BANDNAME = STRMID(BNAMEX, 17, 32)
      ;-----------------------------------------------------------------
      ; MANIPULATE BANDNAME TO GET DATE
      YYY = STRMID(BANDNAME, 8, 4)
      DOY = STRMID(BANDNAME, 13, 3)
      ; AS CALANDER DATE
      CALDAT, JULDAY(1, DOY, YYY), MONTH, DAY, YEAR
      IF DAY LE 9 THEN DAY = '0' + STRING(STRTRIM(DAY,2)) ELSE DAY = STRING(STRTRIM(DAY,2))
      IF MONTH LE 9 THEN MONTH = '0' + STRING(STRTRIM(MONTH,2)) ELSE MONTH = STRING(STRTRIM(MONTH,2))
      OUTDATE = DAY + '/' + MONTH + '/' + STRING(STRTRIM(YEAR,2))
      ; GET YEAR AND DOY
      YEARX = YYY
      DOYX = DOY
      ;-----------------------------------------------------------------
      ; DATA TYPE CHECK
      IF DATA_TYPE LT 4 OR DATA_TYPE GT 5 THEN BEGIN
        ; CONVERT TEMP_DATA TO FLOAT
        TEMP_DATA[j,*] = FLOAT(TEMP_DATA[j,*])
      ENDIF
      ;-----------------------------------------------------------------
      ; GET PIXEL COUNTS
      ; COUNT THE NUMBER OF ELEMENTS (PIXELS) IN ROI[i] BAND[j]
      COUNT_TOTAL = N_ELEMENTS(TEMP_DATA[j,*])*1.0
      ; COUNT THE NUMBER OF NODATA PIXELS IN ROI[i] BAND[j]
      COUNT_255 = TOTAL(TEMP_DATA[j,*] EQ 255.00)*1.0
      ; COUNT THE NUMBER OF VALID (NOT NODATA) PIXELS IN ROI[i] BAND[j]
      COUNT_VALID = TOTAL(TEMP_DATA[j,*] NE 255.00)*1.0
      ; GET PROPORTION OF CLOUD:
      EQ_255 = COUNT_255 / COUNT_TOTAL
      ;-----------------------------------------------------------------
      ; RENAME
      NEWDATA = TEMP_DATA[j,*]
      ; GET PROPORTIONS
      IF COUNT_VALID GT 0 THEN BEGIN 
        ; GET PROPORTION 'PERCENTAGE OF ALL PIXELS':
        GE_T = TOTAL((NEWDATA GE PARAM1) AND (NEWDATA NE 255.00)) / COUNT_TOTAL
        ; GET PROPORTION 'PERCENTAGE OF VALID PIXELS':
        GE_V = TOTAL((NEWDATA GE PARAM1) AND (NEWDATA NE 255.00)) / COUNT_VALID
      ENDIF ELSE BEGIN
        GE_T = 'NAN'
        GE_V = 'NAN'
      ENDELSE
      ;-----------------------------------------------------------------
      ; GET FLOODEVENT STATUS
      IF COUNT_VALID GT 0 THEN BEGIN
        IF OPER EQ 'EQ' THEN BEGIN
          IF GE_T EQ PARAM2 THEN FLOODEVENT_T = 1 ELSE FLOODEVENT_T = 0
          IF GE_V EQ PARAM2 THEN FLOODEVENT_V = 1 ELSE FLOODEVENT_V = 0
        ENDIF
        IF OPER EQ 'LE' THEN BEGIN
          IF GE_T LE PARAM2 THEN FLOODEVENT_T = 1 ELSE FLOODEVENT_T = 0
          IF GE_V LE PARAM2 THEN FLOODEVENT_V = 1 ELSE FLOODEVENT_V = 0
        ENDIF
        IF OPER EQ 'LT' THEN BEGIN
          IF GE_T LT PARAM2 THEN FLOODEVENT_T = 1 ELSE FLOODEVENT_T = 0
          IF GE_V LT PARAM2 THEN FLOODEVENT_V = 1 ELSE FLOODEVENT_V = 0
        ENDIF
        IF OPER EQ 'GE' THEN BEGIN
          IF GE_T GE PARAM2 THEN FLOODEVENT_T = 1 ELSE FLOODEVENT_T = 0
          IF GE_V GE PARAM2 THEN FLOODEVENT_V = 1 ELSE FLOODEVENT_V = 0
        ENDIF
        IF OPER EQ 'GT' THEN BEGIN
          IF GE_T GT PARAM2 THEN FLOODEVENT_T = 1 ELSE FLOODEVENT_T = 0
          IF GE_V GT PARAM2 THEN FLOODEVENT_V = 1 ELSE FLOODEVENT_V = 0
        ENDIF
      ENDIF ELSE BEGIN
        FLOODEVENT_T = 0
        FLOODEVENT_V = 0
      ENDELSE
      ;-----------------------------------------------------------------
      ; WRITE SUMMARY RESULTS TO OUTPUT
      PRINTF, FORMAT='(10000(A,:,","))', OUTLUN1, i, j, '"'+ BANDNAME +'"', OUTDATE, YEARX, DOYX, '"'+ ROINAME +'"', $
        EQ_255, GE_T, GE_V, FLOODEVENT_T, FLOODEVENT_V
      ;-----------------------------------------------------------------
      ; WRITE FLOOD-DATE RESULTS TO OUTPUT      
      IF (FLOODEVENT_T GT 0) OR (FLOODEVENT_V GT 0) THEN BEGIN
        PRINTF, FORMAT='(10000(A,:,","))', OUTLUN2, i, '"'+ ROINAME +'"', '"'+ BANDNAME +'"', OUTDATE, YEARX, DOYX, $
          EQ_255, GE_T, GE_V, FLOODEVENT_T, FLOODEVENT_V
      ENDIF
      ;-----------------------------------------------------------------
    ENDFOR ; END 'FOR j'
    ;-------------------------------------------------------------------
    ; PRINT LOOP TIME
    SECONDS = (SYSTIME(1)-L_TIME)
    PRINT, ''
    PRINT, '  PROCESSING TIME: ', STRTRIM(SECONDS, 2),' SECONDS FOR ', '"' + ROINAME + '"', $
      ' - ROI ', STRTRIM((i+1), 2), ' OF ', STRTRIM(RCOUNT, 2)
  ENDFOR ; END 'FOR i'
  ;---------------------------------------------------------------------
  ; ANALYSE FLOOD-DATE OUTPUT
  
  IF i LT 1 THEN BEGIN
        
  ENDIF ELSE BEGIN
  ; GET PREVIOUS BAND DATA
  OWL_IN_PREV = ENVI_GET_DATA(FID=FID, POS=(i-1), DIMS=DIMS)
  IF OPER EQ 'EQ' THEN (((OWL_IN EQ STRTRIM(PARAM, 2)) AND (OWL_IN NE 255)) $
    AND ((OWL_IN_PREV EQ STRTRIM(PARAM, 2)) AND (OWL_IN_PREV NE 255)))
  IF OPER EQ 'LE' THEN (((OWL_IN LE STRTRIM(PARAM, 2)) AND (OWL_IN NE 255)) $ 
    AND ((OWL_IN_PREV LE STRTRIM(PARAM, 2)) AND (OWL_IN_PREV NE 255))) 
  IF OPER EQ 'LT' THEN (((OWL_IN LT STRTRIM(PARAM, 2)) AND (OWL_IN NE 255)) $ 
    AND ((OWL_IN_PREV LT STRTRIM(PARAM, 2)) AND (OWL_IN_PREV NE 255)))  
  IF OPER EQ 'GE' THEN (((OWL_IN GE STRTRIM(PARAM, 2)) AND (OWL_IN NE 255)) $ 
    AND ((OWL_IN_PREV GE STRTRIM(PARAM, 2)) AND (OWL_IN_PREV NE 255)))
  IF OPER EQ 'GT' THEN (((OWL_IN GT STRTRIM(PARAM, 2)) AND (OWL_IN NE 255)) $ 
    AND ((OWL_IN_PREV GT STRTRIM(PARAM, 2)) AND (OWL_IN_PREV NE 255)))
  ENDELSE
  
  
  
  
  ;---------------------------------------------------------------------
  PRINT,''
  ; PRINT THE TOTAL PROCESSING TIME
  MINUTES = (SYSTIME(1)-T_TIME)/60
  PRINT, '  TOTAL PROCESSING TIME: ', STRTRIM(MINUTES, 2), '  MINUTES'
  PRINT,''
  PRINT,'FINISHED PROCESSING: OWL_TIME_SERIES_FLOODEVENT'
  PRINT,'' 
END